@model Employee

@{
    ViewData["Title"] = "Edit Employee";
}

<h2>Edit Employee</h2>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

<form asp-action="Edit" method="post">
    @Html.AntiForgeryToken()
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <input asp-for="Id" type="hidden" />

    <div class="card mb-3">
        <div class="card-header">
            <h4>Employee Information</h4>
        </div>
        <div class="card-body">
            <div class="form-group mb-3">
                <label asp-for="Name" class="form-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Gender" class="form-label"></label>
                <select asp-for="Gender" class="form-control">
                    <option value="">Select Gender</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </select>
                <span asp-validation-for="Gender" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Company" class="form-label"></label>
                <input asp-for="Company" class="form-control" />
                <span asp-validation-for="Company" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Department" class="form-label"></label>
                <input asp-for="Department" class="form-control" />
                <span asp-validation-for="Department" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-header">
            <h4>Existing Children</h4>
        </div>
        <div class="card-body">
            @if (Model.Children != null && Model.Children.Count > 0)
            {
                for (int i = 0; i < Model.Children.Count; i++)
                {
                    <div class="border p-3 mb-3 bg-light">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h5>Child @(i + 1)</h5>
                            <button type="button" class="btn btn-danger btn-sm"
                                    onclick="removeChildDebug(@Model.Children[i].Id, @Model.Id)">
                                Remove
                            </button>
                        </div>

                        <input name="Children[@i].Id" type="hidden" value="@Model.Children[i].Id" />
                        <input name="Children[@i].EmployeeId" type="hidden" value="@Model.Children[i].EmployeeId" />

                        <div class="row">
                            <div class="col-md-3">
                                <label>Name:</label>
                                <input name="Children[@i].Name" class="form-control" value="@Model.Children[i].Name" />
                            </div>
                            <div class="col-md-3">
                                <label>Gender:</label>
                                <select name="Children[@i].Gender" class="form-control">
                                    <option value="">Select</option>
                                    <option value="Male" selected="@(Model.Children[i].Gender == "Male")">Male</option>
                                    <option value="Female" selected="@(Model.Children[i].Gender == "Female")">Female</option>

                                </select>
                            </div>
                            <div class="col-md-2">
                                <label>Age:</label>
                                <input name="Children[@i].Age" type="number" min="0" max="50" 
                                       class="form-control" value="@Model.Children[i].Age" 
                                       title="Yosh 0 dan 50 gacha bo'lishi kerak"
                                       oninput="validateAge(this)" />
                                <small class="text-muted">0-50 yosh</small>
                            </div>
                            <div class="col-md-2">
                                <label>School:</label>
                                <input name="Children[@i].School" class="form-control" value="@Model.Children[i].School" />
                            </div>
                            <div class="col-md-2">
                                <label>Grade:</label>
                                <input name="Children[@i].Grade" class="form-control" value="@Model.Children[i].Grade" />
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No children found for this employee.</p>
            }
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-header bg-success text-white">
            <h4>Add New Child</h4>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 mb-2">
                    <label for="NewChild_Name">Child Name:</label>
                    <input name="NewChild.Name" id="NewChild_Name" class="form-control" placeholder="Enter child name" />
                </div>
                <div class="col-md-6 mb-2">
                    <label for="NewChild_Gender">Gender:</label>
                    <select name="NewChild.Gender" id="NewChild_Gender" class="form-control">
                        <option value="">Select Gender</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                    </select>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 mb-2">
                    <label for="NewChild_Age">Age:</label>
                    <input name="NewChild.Age" id="NewChild_Age" type="number" min="0" max="50" 
                           class="form-control" placeholder="Age (0-50)" 
                           title="Yosh 0 dan 50 gacha bo'lishi kerak"
                           oninput="validateAge(this)" />
                    <small class="text-muted">0-50 yosh oralig'ida kiriting</small>
                </div>
                <div class="col-md-4 mb-2">
                    <label for="NewChild_School">School:</label>
                    <input name="NewChild.School" id="NewChild_School" class="form-control" placeholder="School name" />
                </div>
                <div class="col-md-4 mb-2">
                    <label for="NewChild_Grade">Grade:</label>
                    <input name="NewChild.Grade" id="NewChild_Grade" class="form-control" placeholder="Grade/Class" />
                </div>
            </div>
            <input name="NewChild.EmployeeId" type="hidden" value="@Model.Id" />
        </div>
    </div>

    <!-- Buttons -->
    <div class="form-group mt-3">
        <button type="submit" class="btn btn-primary">Save All Changes</button>
        <a asp-action="Index" class="btn btn-secondary">Back to List</a>
    </div>
</form>

@section Scripts {
    <script>
        function validateAge(input) {
            const value = parseInt(input.value);
            const min = parseInt(input.min);
            const max = parseInt(input.max);
            
            input.classList.remove('is-valid', 'is-invalid');
            
            if (input.value === '') {
                return;             }
            
            if (isNaN(value) || value < min || value > max) {
                input.classList.add('is-invalid');
                
                let errorDiv = input.parentNode.querySelector('.age-error');
                if (!errorDiv) {
                    errorDiv = document.createElement('div');
                    errorDiv.className = 'age-error text-danger small mt-1';
                    input.parentNode.appendChild(errorDiv);
                }
                errorDiv.textContent = `Yosh ${min} dan ${max} gacha bo'lishi kerak!`;
                
            } else {
                input.classList.add('is-valid');
                
                const errorDiv = input.parentNode.querySelector('.age-error');
                if (errorDiv) {
                    errorDiv.remove();
                }
            }
        }

        function removeChildDebug(childId, employeeId) {
            if (confirm("Bu bolani o'chirmoqchimisiz?")) {
                window.location.href = '/Employee/TestDeleteChild?childId=' + childId + '&employeeId=' + employeeId;
            }
        }

        document.querySelector('form').addEventListener('submit', function(e) {
            console.log('Form submitting...');
            
            let hasValidationErrors = false;
            
            const ageInputs = document.querySelectorAll('input[type="number"][name*="Age"]');
            ageInputs.forEach(input => {
                if (input.value !== '') {
                    const value = parseInt(input.value);
                    const min = parseInt(input.min);
                    const max = parseInt(input.max);
                    
                    if (isNaN(value) || value < min || value > max) {
                        hasValidationErrors = true;
                        input.classList.add('is-invalid');
                        
                        let errorDiv = input.parentNode.querySelector('.age-error');
                        if (!errorDiv) {
                            errorDiv = document.createElement('div');
                            errorDiv.className = 'age-error text-danger small mt-1';
                            input.parentNode.appendChild(errorDiv);
                        }
                        errorDiv.textContent = `Yosh ${min} dan ${max} gacha bo'lishi kerak!`;
                    }
                }
            });
            
            const newChildName = document.querySelector('input[name="NewChild.Name"]').value;
            console.log('New child name:', newChildName);
            
            if (newChildName && newChildName.trim() !== '') {
                const newChildGender = document.querySelector('select[name="NewChild.Gender"]').value;
                if (!newChildGender) {
                    alert('Bola uchun jinsni tanlang!');
                    hasValidationErrors = true;
                }
                
                const newChildAge = document.querySelector('input[name="NewChild.Age"]');
                if (newChildAge.value !== '') {
                    const ageValue = parseInt(newChildAge.value);
                    if (isNaN(ageValue) || ageValue < 0 || ageValue > 50) {
                        alert('Bola yoshi 0 dan 50 gacha bo\'lishi kerak!');
                        hasValidationErrors = true;
                    }
                }
            }
            
            if (hasValidationErrors) {
                e.preventDefault();
                return false;
            }
            
            return true;
        });

        document.addEventListener('DOMContentLoaded', function() {
            const ageInputs = document.querySelectorAll('input[type="number"][name*="Age"]');
            ageInputs.forEach(input => {
                if (input.value !== '') {
                    validateAge(input);
                }
            });
        });
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}